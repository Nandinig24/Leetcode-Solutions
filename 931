class Solution {
public:

    int func(int i , int j ,int n, int m,vector<vector<int>>&matrix,vector<vector<int>>&dp){
                if(i < 0 || j < 0 || j >= m) return 1e9;

        if(i == 0 ) return matrix[i][j];
        if(dp[i][j]!=1e9) return dp[i][j];

        int up = matrix[i][j]+func(i-1,j,n,m,matrix,dp);
        int left = matrix[i][j]+func(i-1,j-1,n,m,matrix,dp);
        int right = matrix[i][j]+func(i-1,j+1,n,m,matrix,dp);
        return dp[i][j] = min({up,left,right});
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>>dp(n,vector<int>(m,1e9));
        int ans =INT_MAX;
        for(int i =0;i<m;i++){
            ans = min(ans,func(n-1,i,n,m,matrix,dp));
        }
        return ans;
    }
};