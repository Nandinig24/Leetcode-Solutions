// class Solution {
// public:
//     int numSubarrayProductLessThanK(vector<int>& nums, int k) {
//         long long pro=1;
//         for(int i=0;i<nums.size();i++){
//             pro*=nums[i];
//             nums[i]=pro;a
//         }
//         int c=0;
//         for(int i=0;i<nums.size();i++){
//             if(nums[i]<k)
//             c++;
//         }
// for(int i=0;i<nums.size();i++){
//    for(int j=0;j<i;j++){
//     if((nums[i]/nums[j])<k)
//     c++;
//    }
// }
// return c;
//     }
// };
class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        if (k <= 1) return 0;  // If k is less than or equal to 1, no subarray can have a product less than k

        int prod = 1;
        int count = 0;
        int left = 0;

        for (int right = 0; right < nums.size(); right++) {
            prod *= nums[right];
            while (prod >= k) {  // Shrink the window from the left until product is less than k
                prod /= nums[left++];
            }
            count += right - left + 1;  // Add the count of subarrays ending at the current right index
        }

        return count;
    }
};