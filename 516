class Solution {
public:


int lcs(string s,string t){
    int n=s.size();
    int m=t.size();
    vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    for(int i=0;i<=n;i++)
        dp[i][0]=0;
    for(int j=0;j<m;j++)
        dp[0][j]=0;
    int ans=0;

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(s[i]==t[j]){
                dp[i+1][j+1]=1+dp[i][j];
                ans=max({ans,dp[i+1][j+1]});

            }
            else
                dp[i+1][j+1]=max({dp[i][j+1],dp[i+1][j]});
        }
    }
        return ans;
    }   
   
    
    int longestPalindromeSubseq(string s) {
      string t=s;
      reverse(t.begin(),t.end());
      int ans=lcs(s,t);
      return ans;
    }
};