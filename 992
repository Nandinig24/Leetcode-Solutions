class Solution {
public:
    // int subarraysWithKDistinct(vector<int>& nums, int k) {
    //     int c=0;
    //     int n=nums.size();
    //     for(int i=0;i<n;i++){
    //         set<int>s;
    //         for(int j=i;j<n;j++){
    //             s.insert(nums[j]);
    //             if(s.size()==k)
    //             c++;
    //             else if(s.size()>k)
    //             break;
    //         }
            
    //     }
    //     return c;
        
    // }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
    int c = 0;
    int n = nums.size();
    int left1 = 0, left2 = 0;
    unordered_map<int, int> freq1, freq2;
    int distinct1 = 0, distinct2 = 0;

    for (int right = 0; right < n; ++right) {
        if (freq1[nums[right]]++ == 0) distinct1++;
        if (freq2[nums[right]]++ == 0) distinct2++;

        while (distinct1 > k) {
            if (--freq1[nums[left1++]] == 0) distinct1--;
        }

        while (distinct2 >= k) {
            if (--freq2[nums[left2++]] == 0) distinct2--;
        }

        c += left2 - left1;
    }

    return c;
}
};