/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// bool f(TreeNode* root, int k,vector<int>&v){
//     if(root==NULL)
//     return false;
//     v.push_back(root->val);

//     if(binary_search(v.begin(),v.end(),k-root->val))
//     return true;

//     return (f(root->left,k,v) | f(root->right,k,v));

// }

//     bool findTarget(TreeNode* root, int k) {
//         vector<int>v;
//         bool ans=f(root,k,v);
//         return  ans;
        
//     }


bool f(TreeNode* root, int k, std::unordered_set<int>& s) {
    if (root == nullptr)
        return false;

    if (s.count(k - root->val))
        return true;

    s.insert(root->val);

    return f(root->left, k, s) || f(root->right, k, s);
}

bool findTarget(TreeNode* root, int k) {
    std::unordered_set<int> s;
    return f(root, k, s);
}
};