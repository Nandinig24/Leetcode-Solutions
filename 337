/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int f(TreeNode* root, std::unordered_map<TreeNode*, int>& memo) {
    if (root == NULL)
        return 0;

    if (memo.find(root) != memo.end())   //  dp of roots
        return memo[root];

    int take = root->val;
    int nottake=0;

    if (root->left != NULL) {
        take += f(root->left->left, memo)+ f(root->left->right, memo);
        nottake += f(root->left, memo);
    }

    if (root->right != NULL) {
        take += f(root->right->left, memo) + f(root->right->right, memo);
        nottake += f(root->right, memo);
    }
    int ans=max({take,nottake});

    
    return memo[root] =ans;  // Memoize the result for the current node
}

int rob(TreeNode* root) {
    std::unordered_map<TreeNode*, int> memo;
    return f(root, memo);
}
};