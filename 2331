/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

void val(TreeNode* root) {
    if (root == nullptr) {
        return ; // Base case: return 0 if the node is nullptr
    }
if(root->right==NULL && root->left==NULL)
return;


 val(root->left);   // Evaluate left subtree
    val(root->right); 


    if (root->right && root->left) {
        if ((root->right->val == 0 || root->right->val == 1) && (root->left->val == 0 || root->left->val == 1)) {
            if (root->val == 2)
                root->val = root->right->val | root->left->val;
            else if (root->val == 3)
                root->val = root->right->val & root->left->val;
        }
     
       // Evaluate right subtree
    }

    
    
}

int evaluateTree(TreeNode* root) {
    val(root);
    return root->val;

}

};