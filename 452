// class Solution {
// public:
// static bool comp(vector<int>&a,vector<int>&b){
//     if(a[0]!=b[0])
//     return a[0]<b[0];
//     return a[1]<b[1];
// }
//     // int findMinArrowShots(vector<vector<int>>& v) {
//         int c=0;
//         sort(v.begin(),v.end(),comp);
//         int back=v[0][1];
//         for(int i=0;i<v.size()-1;i++){
//             if(v[i][1]<v[i+1][0]){
//                 c++;
//                 back=v[i+1][1];
//             }
//             else{
//                 if(v[i+1][0]>back){
//                 c++;
//                 back=v[i+1][1];

//                 }
            
//             }
//         }

//         return c+1;
        
//     }
// };
class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        std::sort(points.begin(), points.end(), [](const auto& a, const auto& b) {
            return a[0] < b[0];
        });

        int arrows = 1;
        int end = points[0][1];

        for (size_t i = 1; i < points.size(); ++i) {
            if (points[i][0] > end) {
                arrows++;
                end = points[i][1];
            } else {
                end = std::min(end, points[i][1]);
            }
        }

        return arrows;
    }
};