class Solution {
public:
int f(int i,int j,int n,int m,string &s1,string &s2,vector<vector<int>>&dp){
    if(i>n-1 || j>m-1)
        return 0;
        
if(dp[i][j]!=-1)
return dp[i][j];

     if(s1[i]==s2[j]){
         dp[i][j]=f(i+1,j+1,n,m,s1,s2,dp)+1;
     }  
     else{
         dp[i][j]=max({f(i+1,j,n,m,s1,s2,dp),f(i,j+1,n,m,s1,s2,dp)});
     } 

return dp[i][j];
}
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        int ans=f(0,0,n,m,word1,word2,dp);
        // cout<<ans<<endl;
        int final=n+m-(2*ans);
        return final;
        
        
    }
};