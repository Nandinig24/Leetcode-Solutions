class Solution {
public:


vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges)const {
        vector<vector<int>> adj(n,vector<int>());

        vector<int> indegree(n,0);
        for(const auto &edge:edges){
            indegree[edge[0]]++;
            indegree[edge[1]]++;
            
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        
        queue<int>q;
        vector<int> ans;
        for(int i=0;i<n;i++){
            //push dryleafs
            if(indegree[i]==1){
                q.push(i);
                
                //drain leaf energy \U0001f602
                indegree[i]--;
            }
        }
        //////////////////

        while(!q.empty()){
            int sz=q.size();
            ans.clear();     // vector each time
            for(int i=0;i<sz;i++){
                //shade all the drained leafs in this queue
                int node=q.front();
                q.pop();
                ans.push_back(node);
                for(const auto &child:adj[node]){
                    indegree[child]--;
                    if(indegree[child]==1){
                        q.push(child);
                    }
                }
            }
        }
        if(n==1) ans.push_back(0);
        return ans;
    }
};