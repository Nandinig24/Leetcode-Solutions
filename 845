#include<bits/stdc++.h>
class Solution {
public:

int longestMountain(vector<int>& arr) {
    int n = arr.size();

    vector<int> dp(n, 1), dp1(n, 1);

    for (int i = 1; i < n; i++) {
        if (arr[i] > arr[i - 1]) {
            dp[i] = dp[i - 1] + 1;
        }
    }

    for (int i = n - 2; i >= 0; i--) {
        if (arr[i] > arr[i + 1]) {
            dp1[i] = dp1[i + 1] + 1;
        }
    }

    int ans = 0;

    for (int i = 0; i < n; i++) {
        if (dp[i] > 1 && dp1[i] > 1) {
            ans = max(ans, dp[i] + dp1[i] - 1);
        }
    }

    if (ans >= 3) {
        return ans;
    }

    return 0;
}
    // int longestMountain(vector<int>& arr) {
    //     int n=arr.size();

    //     vector<int>dp(n,1),dp1(n,1);
    //     int prev=arr[0];
    //     for(int i=1;i<n;i++){
    //         if(arr[i]>prev){
    //             dp[i]=dp[i-1]+1;
    //         }
    //             prev=arr[i];
    //       }
    //       int prev1=arr[n-1];
    //       for(int i=n-2;i>=0;i--){
    //           if(arr[i]>prev1){
    //               dp1[i]=dp1[i-1]+1;
    //           }
    //           prev1=arr[i];
    //       }
    //       int ans=0;
    // for(int i=0;i<n;i++){
    //     if(dp[i]>1 && dp1[i]>1){
    //         ans = max(ans, dp[i] + dp1[i] - 1);
    // }
    // }
    // if(ans>=3)
    // return ans;
    // return 0;
    
    // }
    
//     vector<int>dp(n,1);
// 	vector<int>dp1(n,1);
   
//     //...............LIS from forward
//     for(int  i=1;i<n;i++){
//             if(arr[i-1]<arr[i]){
//                 dp[i]=max(dp[i-1]+1,dp[i]);
//         }
     
//     }
// //.........LIS from backward
// for(int  i=n-2;i>=0;i--){
//             if(arr[i+1]<arr[i]){
//                 dp1[i]=max(dp1[i+1]+1,dp1[i]);
//         }
    
//     }
//     int ans=0;

//         for (int i = 0; i < n; i++) {
// cout<<dp[i]<<" "<<dp1[i]<<endl;
//         }
//     for (int i = 0; i < n; i++) {
//         if(dp[i]>1 && dp1[i]>1)
//         ans = max(ans, dp[i] + dp1[i] - 1);
//     }
//     if(ans>=3)
//     return ans;
//     return 0;
    
//        }
}; 
