/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:


void level(TreeNode* root, vector<vector<int>>& ans) {
    if (root == nullptr) {
        return;
    }

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int levelSize = q.size();  // Number of nodes at the current level
        vector<int> v;

        for (int i = 0; i < levelSize; i++) {
            TreeNode* temp = q.front();
            q.pop();
            v.push_back(temp->val);

            if (temp->left) {
                q.push(temp->left);
            }

            if (temp->right) {
                q.push(temp->right);
            }
        }

        ans.push_back(v);  // Store nodes at the current level
    }
}

vector<int> largestValues(TreeNode* root) {

vector<vector<int>> v;
vector<int> ans;

level(root,v);

for(auto i:v){
    int mx=*max_element(i.begin(),i.end());
    ans.push_back(mx);
}
return ans;
}

};