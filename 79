class Solution {
public:
bool find(vector<vector<char>>& board, const string& word, vector<vector<int>>& vis, int i, int j, const vector<int>& a, const vector<int>& b, int k) {
    int n = board.size();
    int m = board[0].size();

    if (k == word.length()) {
        return true;
    }

    if (i >= 0 && i < n && j >= 0 && j < m && board[i][j] == word[k] && vis[i][j] != 1) {
        vis[i][j] = 1;
        for (int p = 0; p < 4; p++) {
            if (find(board, word, vis, i + a[p], j + b[p], a, b, k + 1)) {
                return true;
            }
        }
        vis[i][j] = 0; // Reset the visited flag after exploring the cell
    }
    return false;
}

bool exist(vector<vector<char>>& board, string word) {
    vector<int> a = {1, 0, -1, 0};
    vector<int> b = {0, -1, 0, 1};
    int n = board.size();
    int m = board[0].size();
    vector<vector<int>> visit(n, vector<int>(m, 0));
    vector<pair<int, int>> vp;
    
    for (int i = 0; i < board.size(); i++) {
        for (int j = 0; j < board[0].size(); j++) {
            if (board[i][j] == word[0])
                vp.push_back({i, j});
        }
    }

    for (int i = 0; i < vp.size(); i++) {
        bool pos = find(board, word, visit, vp[i].first, vp[i].second, a, b, 0);
        if (pos)
            return true;
    }

    return false;
}

// bool find(vector<vector<char>>& board, const string& word,vector<vector<int>>&vis,int i, int j, const vector<int>& a, const vector<int>& b, int k) {
//     int n = board.size();
//     int m = board[0].size();

//     if (k == word.length()) {
//         return true;
//     }


//     if (i >= 0 && i < n && j >= 0 && j < m && board[i][j] == word[k] && vis[i][j]!=1) {
//         vis[i][j]=1;
//         for (int p = 0; p < 4; p++) {
//             if (find(board, word,vis, i + a[p], j + b[p], a, b, k + 1)) {
//                 return true;
//             }
//            }
//         }
//     return false;
// }
//     bool exist(vector<vector<char>>& board, string word) {
//         vector<int>a={1,0,-1,0};
//         vector<int>b={0,-1,0,1};
//         int n=board.size();
//         int m=board[0].size();
//         vector<vector<int>>visit(n,vector<int>(m,0));
//         vector<pair<int,int>>vp;
//         for(int i=0;i<board.size();i++){
//             for(int j=0;j<board[0].size();j++){

//                 if(board[i][j]==word[0])
//                     vp.push_back({i,j});
//             }
//         }
//         for(int i=0;i<vp.size();i++){
//             bool pos=find(board,word,visit,vp[i].first,vp[i].second,a,b,0);
//                     if(pos==true)
//                     return true;
//                 }
            
    
//         return false;
//     }
};