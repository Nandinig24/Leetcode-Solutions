/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void ad(TreeNode* root, vector<vector<int>>& adj) {
        if (root != nullptr) {
            if (root->left) {
                adj[root->val].push_back(root->left->val);
                adj[root->left->val].push_back(root->val);
            }
            if (root->right) {
                adj[root->val].push_back(root->right->val);
                adj[root->right->val].push_back(root->val);
            }
                ad(root->left, adj);
                ad(root->right, adj);
        }
    }

    void dfs(int start, vector<vector<int>>& adj, int& maxHeight, vector<int>& vis, int currentHeight) {
        vis[start] = 1;
        maxHeight = max(maxHeight, currentHeight);

        for (auto it : adj[start]) {
            if (!vis[it]) {
                dfs(it, adj, maxHeight, vis, currentHeight + 1);
            }
        }
    }

    int amountOfTime(TreeNode* root, int start) {
        if (root == nullptr) return 0;

        vector<vector<int>> adj(100001); 
        ad(root, adj);

        vector<int> vis(100001, 0);
        int Level = 0;
        dfs(start, adj, Level, vis, 0);

        return Level;
    }
};