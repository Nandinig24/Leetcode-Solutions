/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void find(TreeNode* root, vector<int> path, vector<vector<int>>& ans) {
    if (root == nullptr)
        return;

    path.push_back(root->val);

    if (root->left == nullptr && root->right == nullptr) {
        ans.push_back(path);
        return;
    }

    if (root->left != nullptr)
        find(root->left, path, ans);

    if (root->right != nullptr)
        find(root->right, path, ans);

    // Pop the last element from path after visiting both left and right subtrees
    path.pop_back();
}

    int sumNumbers(TreeNode* root) {
        vector<int>path;
        vector<vector<int>>ans;
        find(root,path,ans);
        int ans1=0;
        for(auto i:ans){
            string p="";
            for(auto j:i){
                p+=to_string(j);
            }
            ans1+=stoi(p);

        }
        return ans1;
    }
};



   
