// class Solution {
// public:


// bool  static comp(pair<int,char>&a,pair<int,char>&b){
//     if(a.first!=b.first)
//     return a.first>b.first;

//  return a.second<b.second;
// }
// string reorganizeString(string s) {

//     // sort(s.begin(),s.end());
//     vector<pair<int,char>>v;
//     char c1='*';
//     int c=0;

//     for(int i=0;i<s.size();i++){
//         if(s[i]==c1)
//             c++;
//         else{
//             v.push_back({c,c1});
//             c1=s[i];
//             c=1;
//             }
//     }

//     if(c>0)
//     v.push_back({c,c1});
//     sort(v.begin(),v.end(),comp);

//             string ans="";
//             for(int i=0;i<v.size();i++){
//                 for(int j=0;j<v[i].first;j++){
//                 ans+=v[i].second;
//                 }
//             }


// s=ans;
//         for(int i=0;i<s.size()-1;i++){
//             if(s[i]==s[i+1]){
//                 int fl=0;
//              for(int j=i+2;j<s.size();j++){
//                 if(s[j]!=s[i+1]){
//                 swap(s[j],s[i+1]);
//                 break;
//                 }
//             }
//         }
//         }
//         vector<char>v1;
//         for(int i=0;i<s.size()-1;i++){

//             if(s[i]==s[i+1]){
//                 v1.push_back(s[i+1]);
//             }
//         }
//         int ind=-1;
//         for(int i=0;i<s.size()-1;i++){
//             if(s[i]==s[i+1])
//                 ind=i+1;
//             }
//             if(ind==-1)
//             return s;
            

//             string p=s.substr(0,ind);
//             for(int i=0;i<p.size()-1;i++){
//                 if(v1.back()!=p[i] && v1.back()!=p[i+1]){
//                     string s1=p.substr(0,i);
//                     string s2=p.substr(i,p.size()-1);
//                     p=s1+v1.back()+s2;
//                     v1.pop_back();
                    
//                 }
//             }
//             if(v1.size()==0)
//             return p;
//             else 
//             return "";


            
//         // return s;
//     }
// };

class Solution {
public:
    string reorganizeString(string s) {
        int n=s.length();
        unordered_map<char,int>mp;
        for(int i=0;i<n;i++){
            mp[s[i]]++;
        }
        priority_queue<pair<int,char>>pq;
        for(auto i:mp){
            pq.push(make_pair(i.second,i.first));
        }
        string ans;
        while(!pq.empty()){
            auto x=pq.top();
            pq.pop();
            if(ans.empty() || x.second!=ans.back()){
                ans+=x.second;
                if(--x.first>0){
                    pq.push(x);
                }
            }
            else{
                if(pq.empty()){
                    return "";
                }
                auto y=pq.top();
                pq.pop();
                ans+=y.second;
                if(--y.first>0){
                    pq.push(y);
                }
                pq.push(x);
            }
        }
        return ans;
    }
};